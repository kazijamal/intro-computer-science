 1. Ask the user for a number between 1 and 10, if the user doesn't comply
    then keep asking.

    Test Run:
      Enter a number within [1,10): 11
      Enter a number within [1,10): -3
      Enter a number within [1,10):  2
      Thanks

    


    
2. Ask the user for a positive integer, then print all the odd numbers from 1 to n. 
   
   Test Run:
   	Enter a positive #: 10
   	1
   	3
   	5
   	7
   	9
   	DONE

3.Ask the user for two positive integers, and print
  all the odd integers from a to b.

   Test Run #1:
     Enter a positive integer: 2
     Enter another: 15
     3
     5
     7
     9
     11
     13

   Test Run #2:
     Enter a positive integer: 9
     Enter another: 1
     1
     3
     5
     7



4. Read in a positive integer,n, then print all the positive divisors of n.   
   Also, determine if the integer n is prime.

   Test Run #1: 
    Enter a positive integer: 1
    1
    1 is not prime

   Test Run #2:
     Enter a positive integer: 5
     1
     5
     5 is prime

   Test Run #3:
     Enter a positive integer: 24
     1
     2
     3
     4
     6
     8
     12
     24
     24 is not prime

5. Write a script that simulates a slot machine by printing three randomly chosen
   strings as the values displayed by the slot machine. Each string should be randomly
   chosen from amoung four different choices, such as 'orange', 'lemon', 'lime', 'cherry'
   (but any words will do). Choose the random values eight times and display each choice
   of three as shown in the following sample run. If the strings are all the same or are
   all different when the final sequence of these strings appers, then print a message
   that the user wins; otherwise the user loses. (Owen Astrachan, Computer Science Tapestry).

   Test Run of slots.py
   ====================
   Welcome to the slot machine simulation.
   Here's a spin.....
   cherry   orange	cherry
   lime     lemon  	cherry
   lime     lemon 	lemon
   lime	    cherry	cherry
   lemon    lime	cherry
   lemon    lemon	lime
   oragne   lime	lime
   lemon    lemon	lemon
   all values equal. You win!!!!

   Note : The random module contains the function (aka method) choice that returns
          a random element from a list. For example,

             random.choice(['a','b','c']) returns either 'a', 'b', or 'c'. Each is equally likely.

          Also, the time module contains the function sleep(amt_in_seconds) function
	  to pause your program. You may want to pause your program to create some suspense.
         
